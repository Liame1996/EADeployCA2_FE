name: Build
on:
  push:
    branches:
      - master

env:
    PROJECT_ID: ${{ secrets.GKE_PROJECT }}
    GKE_CLUSTER: eadca2-app-fe    # Add your cluster name here.
    GKE_ZONE: europe-west1-c  # Add your cluster zone here.
    DEPLOYMENT_NAME: eadca2 # Add your deployment name here.
    IMAGE: eadca2-app-fe

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Setup Nodejs    
      - name: Install Nodejs for unittest
        uses: actions/setup-node@v2.1.5
        with:
            node-version: '6.x'

      #Set up Nodejs        
      - name: 'npm install'
        run: |
            npm install

      #Nodejs build
      - name: 'npm build'
        run: |
            npm run

      #Connect to GCP
      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
            credentials_json: ${{ secrets.GKE_SA_KEY }}
      
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@1bee7de035d65ec5da40a31f8589e240eba8fde5
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Get the GKE credentials so we can deploy to the cluster    
      - uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials_json: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
        
      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Install Trivy
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh
          
      # Run Trivy 
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bearla/eadca2-app:latest'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          format: 'sarif'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
  
      # Upload - send details to security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif' 
        
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
            curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
            chmod u+x ./kustomize

      # Deploy docker image to GKE Cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
            kubectl rollout status deployment/$DEPLOYMENT_NAME
            kubectl get services -o wide

      # Update service file
      - name: 'Update Kubernetes manifest'
        run: |
          sed -i "s/latest/${{ github.sha }}/g" create-nodejs-service-manifest.yaml

      # Publish YAML file
      - name: Publish YAML artifact
        uses: docker/metadata-action@v3
        with:
          images: bearla/eadca2-app-fe:latest
          manifest-file: create-service-manifest.yaml
          # optional: use 'uses: actions/upload-artifact@v2' to upload the YAML artifact

          #Version Demo